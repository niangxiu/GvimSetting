snippet format
    'trajectory_A{}_K{}.png'.format(int(ifac),int(nseg))


snippet pl
alias pickleload
    try:
        ${1:TARGET}, ${2:TARGET}  = pickle.load( open("${3:TARGET}.p", "rb"))
    except FileNotFoundError:
        ${4:TARGET}


snippet ps
alias pd, pickledump, picklesave
    pickle.dump((${1:TARGET}, ${2:TARGET}), \
        open("${3:TARGET}.p", "wb"))


snippet rc
    plt.rc('axes', labelsize='xx-large',  labelpad=12)
    plt.rc('xtick', labelsize='xx-large')
    plt.rc('ytick', labelsize='xx-large')
    plt.rc('legend', fontsize='xx-large')
    plt.rc('font', family='sans-serif')
  

snippet plot
    plt.plot(${1:TARGET}, ${2:TARGET}, 'k.')
    plt.xlabel('${3:TARGET}')
    plt.ylabel('${4:TARGET}')
    #grid()
    #plt.xlim([])
    #plt.ylim([])
    #ticklabel_format(style='sci', axis='y', scilimits=(3,3))
    plt.tight_layout()
    plt.savefig('${5:TARGET}.png')
    plt.close()${6:TARGET}
   

snippet open
    with open("${1:TARGET}") as ${2:TARGET}:
        ${3:TARGET}


snippet import
    from __future__ import division
    import shutil
    import sys
    import os
    import time
    import pickle
    import itertools
    import numpy as np
    import matplotlib
    matplotlib.use('Agg')
    import matplotlib.pyplot as plt
    from multiprocessing import Pool, current_process
    from pdb import set_trace

    plt.rc('axes', labelsize='xx-large',  labelpad=12)
    plt.rc('xtick', labelsize='xx-large')
    plt.rc('ytick', labelsize='xx-large')
    plt.rc('legend', fontsize='xx-large')
    plt.rc('font', family='sans-serif')
    plt.rc('axes', titlesize='xx-large')


snippet class
    class ${1:TARGET}:

        def __init__(self):
            self.${2:TARGET}= ${3:TARGET}

        def my_function(self, my_args):
            ${4:TARGET}


snippet function
alias func
    def my_func${1:TARGET}(my_args${2:TARGET}):
        """
        Args: 
            ${3:TARGET}
        Returns:
            ${4:TARGET}
        """
        ${5:TARGET}
        return ${6:TARGET}
  

snippet trace
    import pdb; 
    pdb.set_trace()


snippet pandas
    from __future__ import division
    from numpy import *
    from pandas import *
    source =  read_excel('${1:TARGET}')
    nsource = source['${2:TARGET}'].shape[0]


snippet fig
    fig = plt.figure(figsize=(10,8))
    plt.semilogx(T_, Javg_, 'k.')
    plt.xlabel('$T$')
    plt.ylabel('$J_{avg}$')
    plt.tight_layout()
    plt.savefig('T_J.png')
    plt.close()


snippet subfig
     f, (ax1, ax2) = plt.subplots(1, 2, figsize=(12,5), sharey=True)
     ax1.scatter(u[:100,:,2].T, u[:100,:,1].T, c=u[:100,:,0].T, cmap='gray', s=0.01, label='z')
     ax2.scatter(u[-100:,:,2].T, u[-100:,:,1].T, c=u[-100:,:,0].T, cmap='gray', s=0.01, label='z')
   

snippet stop
alias st
    #TODO: stop
